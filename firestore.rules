rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Test collection for verifying authentication
    match /test/{document=**} {
      allow read, write: if true;
    }
    
    // User Settings collection
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Chats collection
    match /chats/{chatId} {
      // Allow users to read their own chats
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Allow users to create new chats
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow users to update their own chats
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;
      
      // Allow users to delete their own chats
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // User Prompts collection
    match /userPrompts/{promptId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(request.resource.data.userId);
    }
    
    // Prompts collection - Allow all authenticated users to read
    match /prompts/{promptId} {
      allow read: if isAuthenticated();
      allow write: if false; // Keep write access restricted
    }
    
    // Prompts subcollections - Allow authenticated users to read
    match /prompts/{promptId}/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}